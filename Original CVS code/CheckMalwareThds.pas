unit CheckMalwareThds;

{$I DelphiVersion.inc}
{$IFDEF DELPHI_6_UP}
  {$WARN SYMBOL_PLATFORM OFF}
{$ENDIF}

interface

uses
  Classes, SysUtils, Sign;

const
  ENTROPY_LIMIT_HIGH = 7.55;
  ENTROPY_LIMIT_LOW = 7.0;

  ENTROPY_LIMIT_RSRC = 1.3;

  SIZE_LIMIT_MALWARE = 2000*1024;
  SIZE_LIMIT_IMPROBABLE = 2500*1024;

  LIMIT_BAD_POINTS_HIGH = 1;
  LIMIT_BAD_POINTS_LOW = 0;

  LIMIT_FOR_ALL_FILES = 4;
  SIZE_LIMIT_ALL_FILES = 900*1024;

type
  TCheckMalwareThread = class(TThread)
  private
    { Private declarations }
    FFilename    : string;
    FIsProbableMalware : boolean;
    FMoveToQuarantine : boolean;
    FTypeOfDetection : TDetectionsType;
    FSignatureVerified : boolean;
    FSignatureVerifyResult : TVerifyResult;
    FSize : Cardinal;
    FHasPEFormat : boolean;
    FIsNewFile : boolean;
    FHasEmbeddedSignature : boolean;
    FFileType : TFileTypeDetected;
    FPointsForAllFiles : Cardinal;
    FIsOutsideMonitor : boolean;
    FIsHidden : boolean;
    FDateModify : TDateTime;
    FDateCreate : TDateTime;
    FDateAccess : TDateTime;
    FlstExtToMonitor : TStringList;
    
  protected
    procedure Execute; override;

  public
    property Filename : string read FFilename;
    property IsProbableMalware : boolean read FIsProbableMalware;
    property MoveToQuarantine : boolean read FMoveToQuarantine;
    property TypeOfDetection : TDetectionsType read FTypeOfDetection;
    property SignatureVerified : boolean read FSignatureVerified;
    property SignatureVerifyResult : TVerifyResult read FSignatureVerifyResult;
    property Size : Cardinal read FSize;
    property HasPEFormat : boolean read FHasPEFormat;
    property IsNewFile : boolean read FIsNewFile;
    property HasEmbeddedSignature : boolean read FHasEmbeddedSignature;
    property FileType : TFileTypeDetected read FFileType;
    property PointsForAllFiles : Cardinal read FPointsForAllFiles;
    property IsOutsideMonitor : boolean read FIsOutsideMonitor;
    property IsHidden : boolean read FIsHidden;
    property DateModify : TDateTime read FDateModify;
    property DateCreate : TDateTime read FDateCreate;
    property DateAccess : TDateTime read FDateAccess;

    constructor Create(const sFilename : string; const bOutsideMonitor : boolean; const lstExtToMonitor : TStrings);
  end;

var
  IsWin9x : boolean;
  NotWin9x : boolean;
  IsWin8 : boolean;
  
implementation

uses Windows, Utility, VerifyPEFormat;

{ TCheckMalwareThread }

constructor TCheckMalwareThread.Create(const sFilename : string; const bOutsideMonitor : boolean; const lstExtToMonitor : TStrings);
begin
  FFilename := sFilename;
  FIsProbableMalware := false;
  FMoveToQuarantine := false;
  FTypeOfDetection := good;
  FSize := 0;
  FSignatureVerified := false;
  FSignatureVerifyResult := NoSignFound;
  FHasPEFormat := false;
  FIsNewFile := false;
  FHasEmbeddedSignature := false;
  FFileType := IsUndefined;
  FPointsForAllFiles := 0;
  FIsOutsideMonitor := bOutsideMonitor;
  FIsHidden := false;

  FDateModify := 0;
  FDateCreate := 0;
  FDateAccess := 0;

  FlstExtToMonitor := TStringList.Create;
  FlstExtToMonitor.AddStrings(lstExtToMonitor);

  FreeOnTerminate := True;

  inherited Create(false);
end;

procedure TCheckMalwareThread.Execute;
var
  Sections : Word;
  Entropy : double;
  Perc : double;

  Checksum : Cardinal;
  ChecksumRecalc : Cardinal;
  bHeaderOK : boolean;
  bCheckEntropy : boolean;

  iBadPoints : Cardinal;
  bProbablyBad : boolean;
  bHasMalwareSize : boolean;
  bHasImprobableMalwareSize : boolean;
  bBadEntropy : boolean;
  bBadNTHeader : boolean;
  bBadHeaderTimestamp : boolean;
  bHasRsrcSection : boolean;
  
  resultSign : TVerifyResult;

  sRealExt : string;
  sInternalExt : string;
  bManyChars : boolean;
  Attr : DWORD;
  sWindowsDir : string;
  sSystemProgramFilesDir : string;
  sSystemWOWProgramFilesDir : string;

  function TooManyBadPoints : boolean;
    var bIsDll_or_OCX : boolean;
  begin
    result := false;

    bIsDll_or_OCX := (FileType = IsDll) or (FileType = IsOCX);

    if (bHasMalwareSize and (iBadPoints > LIMIT_BAD_POINTS_LOW) and not(bIsDll_or_OCX))
    or ((bHasImprobableMalwareSize or bIsDll_or_OCX) and (iBadPoints > LIMIT_BAD_POINTS_HIGH)) then
    begin
      FIsProbableMalware := true;
      FMoveToQuarantine := true;

      result := true;
    end;
  end;

  procedure VerifySignature;
  begin
    resultSign := CheckFileTrust(FFilename);

    FSignatureVerified := true;
    FSignatureVerifyResult := resultSign;

    if resultSign = SignOK then
    begin
      FIsProbableMalware := false;
      FMoveToQuarantine := false;
    end;

    if (resultSign in [SignInvalid]) and not(IsWin8 and not(FHasEmbeddedSignature)) then
    begin
      FIsProbableMalware := true;
      FMoveToQuarantine := true;

      FPointsForAllFiles := INFINITY_POINTS;
      FTypeOfDetection := badSignature;
    end;

    if resultSign = SignExpired then
    begin
      FIsProbableMalware := true;
      FMoveToQuarantine := false;

      FTypeOfDetection := SignatureExpired;
    end;
  end;

begin
  { Place thread code here }
  Sleep(500);

  sRealExt := '';
  sInternalExt := '';

  IsWin9x := Win32Platform = VER_PLATFORM_WIN32_WINDOWS;
  NotWin9x := not(IsWin9x);
  IsWin8 := (Win32Platform = VER_PLATFORM_WIN32_NT) and (Win32MajorVersion = 6) and (Win32MinorVersion = 2);

  iBadPoints := 0;
  Entropy := 0;
  FIsProbableMalware := false;
  FMoveToQuarantine := false;
  bHeaderOK := true;
  FTypeOfDetection := good;
  bCheckEntropy := false;
  bBadEntropy := false;
  bBadNTHeader := false;
  bBadHeaderTimestamp := false;

  if GetFileTimes(FFilename, FDateCreate, FDateAccess, FDateModify) then
  begin
    if (FDateModify < EncodeDate(1980, 1, 1)) or (FDateModify > EncodeDate(2107, 12, 31)) then
    begin
      FIsProbableMalware := true;
      FMoveToQuarantine := true;

      FPointsForAllFiles := INFINITY_POINTS;
      FTypeOfDetection := Suspicious;
      exit;
    end;

    if SecondsDiff(FDateCreate,now) < 60 then
      FIsNewFile := true;
  end;

  //Conditions proposed by Robert Scroggins
  if IsPEFormat(FFilename, FSize, Sections, Checksum, bHeaderOK, bCheckEntropy
                                 , iBadPoints, bBadNTHeader, FHasEmbeddedSignature
                                 , FFileType, bBadHeaderTimestamp, FPointsForAllFiles
                                 , bHasRsrcSection) then
  begin
    FHasPEFormat := true;

    try
      Attr := GetFileAttributes(PChar(FFilename));

      if (Attr <> DWORD(-1)) then
      begin
        if ((Attr and faHidden) > 0) then
        begin
          FIsHidden := true;
          FPointsForAllFiles := INFINITY_POINTS;
          FTypeOfDetection := Suspicious;
          FIsProbableMalware := true;

          if ((Attr and faSysFile) > 0) then
          begin
            FMoveToQuarantine := true;
            exit;
          end;
        end;
      end;
    finally
    end;

    if bBadHeaderTimestamp then
    begin
      FIsProbableMalware := true;
      FMoveToQuarantine := true;

      FPointsForAllFiles := INFINITY_POINTS;
      FTypeOfDetection := badPEHeader;
      exit;
    end;

    if bBadNTHeader then
    begin
      FIsProbableMalware := true;
      FMoveToQuarantine := true;

      FPointsForAllFiles := INFINITY_POINTS;
      FTypeOfDetection := badPEHeader;
      exit;
    end;

    if DoubleExtensions(FFilename, sRealExt, sInternalExt, bManyChars) then
    begin
      if (bManyChars or ExtensionKnown(sInternalExt)) and (not (UpperCase(sRealExt) = '.MUI'))
             and (FlstExtToMonitor.IndexOf(sRealExt)>=0) then
      begin
        sWindowsDir := AddSlash(GetWinDir);
        sSystemProgramFilesDir := ExpandEnvironment(AddSlash(GetGlobalSystemPath('ProgramFilesDir')));
        sSystemWOWProgramFilesDir := ExpandEnvironment(AddSlash(GetWOWGlobalSystemPath('ProgramFilesDir')));

        //skip .NET folders
        if ((Pos(sWindowsDir + 'assembly\', FFilename)=0)
             and (Pos(sWindowsDir + 'Microsoft.NET\', FFilename)=0)
             and (Pos(sSystemProgramFilesDir + 'Reference Assemblies',FFilename)=0)
             and (Pos(sSystemProgramFilesDir + 'Microsoft Silverlight',FFilename)=0)
             and (Pos(sSystemWOWProgramFilesDir + 'Reference Assemblies',FFilename)=0)
             and (Pos(sSystemWOWProgramFilesDir + 'Microsoft Silverlight',FFilename)=0)) then
        begin
          FTypeOfDetection := SuspiciousExt;

          FMoveToQuarantine := true;
          FIsProbableMalware := true;
          FPointsForAllFiles := INFINITY_POINTS;
        end;
      end;
    end;

    if FSize > SIZE_LIMIT_IMPROBABLE then
      exit;

    if IsWin9x and FHasEmbeddedSignature and not(FSignatureVerified) then
    begin
      VerifySignature;

      if (resultSign = SignOK) or (resultSign = SignInvalid) then
        exit;
    end;

    bHasMalwareSize := (FSize <= SIZE_LIMIT_MALWARE);

    bHasImprobableMalwareSize := not(bHasMalwareSize) and (FSize <= SIZE_LIMIT_IMPROBABLE);

    if not(bHeaderOK) then
    begin
      Inc(FPointsForAllFiles);
      FTypeOfDetection := Suspicious;
    end;

    if not(TooManyBadPoints) or FIsOutsideMonitor then
    begin
      if Checksum > 0 then
      begin
        ChecksumRecalc := ComputePEChecksum(FFilename);

        if (ChecksumRecalc > 0) and (Checksum <> ChecksumRecalc) then
        begin
          if not IsWin9x then
            IncBad(iBadPoints,3)
          else
            IncBad(iBadPoints);

          bCheckEntropy := true;

          Inc(FPointsForAllFiles);

          if FTypeOfDetection = good then
            FTypeOfDetection := Crypted;
        end
      end;

      if not(TooManyBadPoints) or FIsOutsideMonitor then
      begin
        bProbablyBad := (iBadPoints>0);

        if bHasMalwareSize or bCheckEntropy
           or (bProbablyBad and bHasImprobableMalwareSize) then
        begin
          CalcEntropyFile(FFilename, Entropy, Perc);
        end;

        if not(bHasRsrcSection) and (Entropy > ENTROPY_LIMIT_RSRC) then
        begin
           FIsProbableMalware := true;
           FMoveToQuarantine := true;
           Inc(FPointsForAllFiles);

           if FTypeOfDetection = good then
             FTypeOfDetection := Suspicious;
        end;

        if (not(bProbablyBad or bCheckEntropy) and (Entropy > ENTROPY_LIMIT_HIGH))
            or ((bCheckEntropy or bProbablyBad) and (Entropy >= ENTROPY_LIMIT_LOW)) then
        begin
          bBadEntropy := true;
        end;

        if bBadEntropy and (bProbablyBad or bHasMalwareSize) then
        begin
          FIsProbableMalware := true;
          FMoveToQuarantine := true;

          Inc(FPointsForAllFiles);

          if FTypeOfDetection = good then
            FTypeOfDetection := Obfuscated;
        end;
      end;
    end;

    if FIsProbableMalware and not(FSignatureVerified) then
    begin
      VerifySignature;

      if (resultSign = SignOK) or (resultSign = SignInvalid) then
      begin
        exit;
      end;
    end;
  end
  else
     if bBadNTHeader then
     begin
       FIsProbableMalware := true;
       FMoveToQuarantine := true;
       Inc(FPointsForAllFiles);
       FTypeOfDetection := badPEHeader;
     end;

  FlstExtToMonitor.Free;
end;

end.
